# -*- coding: utf-8 -*-
"""COVID19DATA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QpN6up4ssQA41fcYcwKfM-X_wQIPLSAK

## Importing libraries
"""

import pandas as pd
import seaborn as sns
from datetime import date
from scipy.stats import pearsonr 
from matplotlib import pyplot as plt
from scipy.stats import ttest_ind

# Apply the default theme
sns.set_theme()

# original dataframe
dataset = pd.read_csv('owid-covid-data.csv', delimiter = ',')
# dataframe with removed null and nan values for later use
dataset2 = dataset.dropna(subset =['total_deaths_per_million','total_cases_per_million','continent', 'hospital_beds_per_thousand','population_density','gdp_per_capita'])
moredata = pd.DataFrame(columns = ['percentage', 'gdp', 'continent','population_density','hospital_beds_per_thousand'])
#timedata = pd.DataFrame(columns=['meanCases', 'meanDeaths', 'meanlogos', 'continent'])
continentdata = pd.DataFrame(columns=['meanCases', 'meanDeaths', 'meanlogos', 'continent'])

"""**Parameters:**

*   total_cases_per_million
*   total_cases_per_million
*   Mortality rate
*   gdp_per_capita
*   hospital_beds_per_thousand
*   population_density

## total_cases_per_million and gbp_per_capita
"""

# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
    x="total_cases_per_million",
    y="gdp_per_capita",
    data=dataset,
    hue="continent",
)
#remove nulls, nans
dataset1 = dataset.dropna(subset =['total_cases_per_million','gdp_per_capita'])

#print(dataset1['total_cases_per_million'])
#print(dataset1['gdp_per_capita'])

# Convert dataframe into series 
list1 = dataset1['total_cases_per_million'] 
list2 = dataset1['gdp_per_capita'] 

# Apply the pearsonr() 
corr, _ = pearsonr(list1, list2) 
print('Pearsons correlation: %.3f' % corr)

"""total_cases_per_million and gbp_per_capita without the african countries"""

notAfrica = dataset[dataset.continent != 'Africa']
#print(notAfrica)
# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
    data=notAfrica,
    x="total_cases_per_million", y="gdp_per_capita", hue="continent",
)

"""total_cases_per_million and gbp_per_capita
only for the European continent.
"""

dataEurope = dataset.loc[dataset['continent'] == 'Europe']

# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
    data=dataEurope,
    x="total_cases_per_million", y="gdp_per_capita", hue="continent",
)

"""## total_deaths_per_million and gbp_per_capita"""

# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 

sns.scatterplot(
    data=dataset,
    x="total_deaths_per_million", y="gdp_per_capita", hue="continent",
)

#remove nulls, nans
dataset1 = dataset.dropna(subset =['total_deaths_per_million','gdp_per_capita'])

#print(dataset1['total_cases_per_million'])
#print(dataset1['gdp_per_capita'])

# Convert dataframe into series 
list1 = dataset1['total_deaths_per_million'] 
list2 = dataset1['gdp_per_capita'] 

# Apply the pearsonr() 
corr, _ = pearsonr(list1, list2) 
print('Pearsons correlation: %.3f' % corr)

"""total_deaths_per_million and gbp_per_capita 
only for the african continent.
"""

notAfrica = dataset[dataset.continent != 'Africa']
#print(notAfrica)
# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
    data=notAfrica,
    x="total_deaths_per_million", y="gdp_per_capita", hue="continent",
)

"""total_deaths_per_million and gbp_per_capita 
only for the European continent.
"""

dataEurope = dataset.loc[dataset['continent'] == 'Europe']

# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
    data=dataEurope,
    x="total_deaths_per_million", y="gdp_per_capita", hue="continent",
)

"""## Mortality rate and GDP"""

result = dataset2['total_deaths_per_million'].div(dataset2['total_cases_per_million'].values, axis=0)

moredata['percentage'] = result
moredata['gdp']  = dataset2['gdp_per_capita']

moredata['hospital_beds_per_thousand'] = dataset2['hospital_beds_per_thousand']
#print(moredata['hospital_beds_per_thousand'])
moredata['population_density'] = dataset2['population_density']

#print(moredata)

list1 = moredata['percentage'] 
list2 = moredata['gdp'] 

# Apply the pearsonr() 
corr, _ = pearsonr(list1, list2) 
print('Pearsons correlation: %.3f' % corr) 

# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
     data=moredata,
     x="percentage", y="gdp", hue="continent"
 )

"""## Mortality rate and hospital_beds_per_thousands"""

list1 = moredata['percentage'] 
list2 = moredata['hospital_beds_per_thousand']

# Apply the pearsonr() 
corr, _ = pearsonr(list1, list2) 
print('Pearsons correlation: %.3f' % corr) 

# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
     data=moredata,
     x="percentage", y="hospital_beds_per_thousand", hue="continent"
 )

"""## Mortality rate and population_density"""

list1 = moredata['percentage'] 
list2 = moredata['population_density'] 

# Apply the pearsonr() 
corr, _ = pearsonr(list1, list2) 
print('Pearsons correlation: %.3f' % corr) 

# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
     data=moredata,
     x="percentage", y="population_density", hue="continent"
 )

"""## total_cases_per_million and hospital_beds_per_thousand"""

# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
    data=dataset,
    x="total_cases_per_million", y="hospital_beds_per_thousand", hue="continent",
)
#remove nulls, nans
dataset1 = dataset.dropna(subset =['total_cases_per_million','hospital_beds_per_thousand'])

# Convert dataframe into series 
list1 = dataset1['total_cases_per_million'] 
list2 = dataset1['hospital_beds_per_thousand'] 

# Apply the pearsonr() 
corr, _ = pearsonr(list1, list2) 
print('Pearsons correlation: %.3f' % corr)

"""## total_cases_per_million and population_density"""

# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
    data=dataset,
    x="total_cases_per_million", y="population_density", hue="continent",
)
#remove nulls, nans
dataset1 = dataset.dropna(subset =['total_cases_per_million','population_density'])

#print(dataset1['total_cases_per_million'])
#print(dataset1['gdp_per_capita'])

# Convert dataframe into series 
list1 = dataset1['total_cases_per_million'] 
list2 = dataset1['population_density'] 

# Apply the pearsonr() 
corr, _ = pearsonr(list1, list2) 
print('Pearsons correlation: %.3f' % corr)

"""## total_deaths_per_million and hospital_beds_per_thousand"""

# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
    data=dataset,
    x="total_deaths_per_million", y="hospital_beds_per_thousand", hue="continent",
)
#remove nulls, nans
dataset1 = dataset.dropna(subset =['total_deaths_per_million','hospital_beds_per_thousand'])

#print(dataset1['total_cases_per_million'])
#print(dataset1['gdp_per_capita'])

# Convert dataframe into series 
list1 = dataset1['total_deaths_per_million'] 
list2 = dataset1['hospital_beds_per_thousand'] 

# Apply the pearsonr() 
corr, _ = pearsonr(list1, list2) 
print('Pearsons correlation: %.3f' % corr)

"""## total_deaths_per_million and population_density"""

# Create a visualization
sns.set(rc={"figure.figsize":(20, 12)}) 
sns.scatterplot(
    data=dataset,
    x="total_deaths_per_million", y="population_density", hue="continent",
)
#remove nulls, nans
dataset1 = dataset.dropna(subset =['total_cases_per_million','hospital_beds_per_thousand'])

#print(dataset1['total_cases_per_million'])
#print(dataset1['gdp_per_capita'])

# Convert dataframe into series 
list1 = dataset1['total_cases_per_million'] 
list2 = dataset1['hospital_beds_per_thousand'] 

# Apply the pearsonr() 
corr, _ = pearsonr(list1, list2) 
print('Pearsons correlation: %.3f' % corr)

"""##B. bar plot for Mean Measurements"""

meandata = pd.DataFrame(columns = ['meancases','meandeaths','percentage', 'continent'])

dataAsia = dataset.loc[dataset['continent'] == 'Asia']
meanAsiacases = dataAsia['total_cases_per_million'].mean(axis=0)
meanAsiadeaths = dataAsia['total_deaths_per_million'].mean(axis=0)
meandata = meandata.append({'meancases' : meanAsiacases, 'meandeaths' : meanAsiadeaths, 'continent' : 'Asia'}, ignore_index=True)


dataEurope = dataset.loc[dataset['continent'] == 'Europe']
meanEuropecases = dataEurope['total_cases_per_million'].mean(axis=0)
meanEuropedeaths = dataEurope['total_deaths_per_million'].mean(axis=0)
meandata = meandata.append({'meancases' : meanEuropecases, 'meandeaths' : meanEuropedeaths,'continent' : 'Europe'}, ignore_index=True)


dataAfrica = dataset.loc[dataset['continent'] == 'Africa']
meanAfricacases = dataAfrica['total_cases_per_million'].mean(axis=0)
meanAfricadeaths = dataAfrica['total_deaths_per_million'].mean(axis=0)
meandata = meandata.append({'meancases' : meanAfricacases, 'meandeaths' : meanAfricadeaths, 'continent' : 'Africa'}, ignore_index=True)


dataNAmerica = dataset.loc[dataset['continent'] == 'North America']
meanNAmericacases = dataNAmerica['total_cases_per_million'].mean(axis=0)
meanNAmericadeaths = dataNAmerica['total_deaths_per_million'].mean(axis=0)
meandata = meandata.append({'meancases' : meanNAmericacases, 'meandeaths' : meanNAmericadeaths, 'continent' : 'N.America'}, ignore_index=True)


dataSAmerica = dataset.loc[dataset['continent'] == 'South America']
meanSAmericacases = dataSAmerica['total_cases_per_million'].mean(axis=0)
meanSAmericadeaths = dataSAmerica['total_deaths_per_million'].mean(axis=0)
meandata = meandata.append({'meancases' : meanSAmericacases, 'meandeaths' : meanSAmericadeaths, 'continent' : 'S.America'}, ignore_index=True)


dataOceania = dataset.loc[dataset['continent'] == 'Oceania']
meanOceaniacases = dataOceania['total_cases_per_million'].mean(axis=0)
meanOceaniadeaths = dataOceania['total_deaths_per_million'].mean(axis=0)
meandata = meandata.append({'meancases' : meanOceaniacases, 'meandeaths' : meanOceaniadeaths, 'continent' : 'Oceania'}, ignore_index=True)
print(meandata)

"""## t-test"""

t1 = meandata['meancases']
t2 = meandata['meandeaths']

t = ttest_ind(t1, t2)
print(t)

"""## Visualizing data of ex.B"""

sns.set(rc={"figure.figsize":(10, 6)}) 

sns.barplot(x="continent", y="meancases", hue="continent", data=meandata)

sns.set(rc={"figure.figsize":(10, 6)}) 

sns.barplot(x="continent", y="meandeaths", hue="continent", data=meandata)

"""## C. Time
Pointers in time
"""

dataset['date']= pd.to_datetime(dataset['date'])

dataset['year'] = pd.DatetimeIndex(dataset['date']).year
dataset['month'] = pd.DatetimeIndex(dataset['date']).month

# remove index=0
#dataset = dataset.drop([0])
#print(dataset)
timedata = pd.DataFrame(columns=['meanCases', 'meanDeaths', 'meanlogos', 'month'])

dataJanuary = dataset.loc[dataset['month'] == 1]
meanNewCasesJanuary = dataJanuary['new_cases'].mean(axis=0)
meanNewDeathsJanuary = dataJanuary['new_deaths'].mean(axis=0)
logos1 = meanNewCasesJanuary/meanNewDeathsJanuary
timedata = timedata.append({'meanCases' : meanNewCasesJanuary, 'meanDeaths' : meanNewDeathsJanuary ,
                            'meanlogos' : logos1, 'month' : 1}, ignore_index=True)

dataFebruary = dataset.loc[dataset['month'] == 2]
meanNewCasesFebruary = dataFebruary['new_cases'].mean(axis=0)
meanNewDeathsFebruary = dataFebruary['new_deaths'].mean(axis=0)
logos2 = meanNewCasesFebruary / meanNewDeathsFebruary
timedata = timedata.append({'meanCases' : meanNewCasesFebruary, 'meanDeaths' : meanNewDeathsFebruary ,
                            'meanlogos' : logos2, 'month' : 2}, ignore_index=True)

dataMarch = dataset.loc[dataset['month'] == 3]
meanNewCasesMarch = dataMarch['new_cases'].mean(axis=0)
meanNewDeathsMarch = dataMarch['new_deaths'].mean(axis=0)
logos3 = meanNewCasesMarch/meanNewDeathsMarch
timedata = timedata.append({'meanCases' : meanNewCasesMarch, 'meanDeaths' : meanNewDeathsMarch ,
                            'meanlogos' : logos3, 'month' : 3}, ignore_index=True)


dataApril = dataset.loc[dataset['month'] == 4]
meanNewCasesApril = dataApril['new_cases'].mean(axis=0)
meanNewDeathsApril = dataApril['new_deaths'].mean(axis=0)
logos4 = meanNewCasesApril/meanNewDeathsApril
timedata = timedata.append({'meanCases' : meanNewCasesApril, 'meanDeaths' : meanNewDeathsApril ,
                            'meanlogos' : logos4, 'month' : 4}, ignore_index=True)

dataMay = dataset.loc[dataset['month'] == 5]
meanNewCasesMay = dataMay['new_cases'].mean(axis=0)
meanNewDeathsMay = dataMay['new_deaths'].mean(axis=0)
logos5 = meanNewCasesMay/meanNewDeathsMay
timedata = timedata.append({'meanCases' : meanNewCasesMay, 'meanDeaths' : meanNewDeathsMay ,
                            'meanlogos' : logos5, 'month' : 5}, ignore_index=True)

dataJune = dataset.loc[dataset['month'] == 6]
meanNewCasesJune = dataJune['new_cases'].mean(axis=0)
meanNewDeathsJune = dataJune['new_deaths'].mean(axis=0)
logos6 = meanNewCasesJune/meanNewDeathsJune
timedata = timedata.append({'meanCases' : meanNewCasesJune, 'meanDeaths' : meanNewDeathsJune ,
                            'meanlogos' : logos6, 'month' : 6}, ignore_index=True)

dataJuly = dataset.loc[dataset['month'] == 7]
meanNewCasesJuly = dataJuly['new_cases'].mean(axis=0)
meanNewDeathsJuly = dataJuly['new_deaths'].mean(axis=0)
logos7 = meanNewCasesJuly/meanNewDeathsJuly
timedata = timedata.append({'meanCases' : meanNewCasesJuly, 'meanDeaths' : meanNewDeathsJuly ,
                            'meanlogos' : logos7, 'month' : 7}, ignore_index=True)

dataAugust = dataset.loc[dataset['month'] == 8]
meanNewCasesAugust = dataAugust['new_cases'].mean(axis=0)
meanNewDeathsAugust = dataAugust['new_deaths'].mean(axis=0)
logos8 = meanNewCasesAugust/meanNewDeathsAugust
timedata = timedata.append({'meanCases' : meanNewCasesAugust, 'meanDeaths' : meanNewDeathsAugust ,
                            'meanlogos' : logos8, 'month' : 8}, ignore_index=True)

dataSeptember = dataset.loc[dataset['month'] == 9]
meanNewCasesSeptember = dataSeptember['new_cases'].mean(axis=0)
meanNewDeathsSeptember = dataSeptember['new_deaths'].mean(axis=0)
logos9 = meanNewCasesSeptember/meanNewDeathsSeptember
timedata = timedata.append({'meanCases' : meanNewCasesSeptember, 'meanDeaths' : meanNewDeathsSeptember ,
                            'meanlogos' : logos9, 'month' : 9}, ignore_index=True)

dataOctober = dataset.loc[dataset['month'] == 10]
meanNewCasesOctober = dataOctober['new_cases'].mean(axis=0)
meanNewDeathsOctober = dataOctober['new_deaths'].mean(axis=0)
logos10 = meanNewCasesOctober/meanNewDeathsOctober
timedata = timedata.append({'meanCases' : meanNewCasesOctober, 'meanDeaths' : meanNewDeathsOctober ,
                            'meanlogos' : logos10, 'month' : 10}, ignore_index=True)

dataNovember = dataset.loc[dataset['month'] == 11]
meanNewCasesNovember = dataNovember['new_cases'].mean(axis=0)
meanNewDeathsNovember = dataNovember['new_deaths'].mean(axis=0)
logos11 = meanNewCasesNovember/meanNewDeathsNovember
timedata = timedata.append({'meanCases' : meanNewCasesNovember, 'meanDeaths' : meanNewDeathsNovember ,
                            'meanlogos' : logos11, 'month' : 11}, ignore_index=True)
print(timedata)
#dataDecember = dataset.loc[dataset['month'] == 12]
#meanNewCasesDecember = dataDecember['new_cases'].mean(axis=0)
#meanNewDeathsDecember = dataDecember['new_deaths'].mean(axis=0)
#logos12 = meanNewCasesDecember / meanNewDeathsDecember
#timedata = timedata.append({'meanCases' : meanNewCasesDecember, 'meanDeaths' : meanNewDeathsDecember ,
                      #      'meanlogos' : logos, 'month' : 12}, ignore_index=True)

"""## Visualize Time Data"""

sns.set(rc={"figure.figsize":(10, 6)}) 

sns.set(rc={"figure.figsize":(10, 6)}) 
sns.regplot(
    data=timedata,
    x="month", y="meanCases", ci = 95
)

sns.set(rc={"figure.figsize":(10, 6)}) 
sns.regplot(
    data=timedata,
    x="month", y="meanlogos", ci = 95
)

sns.set(rc={"figure.figsize":(10, 6)}) 
sns.regplot(
    data=timedata,
    x="month", y="meanDeaths", ci = 95
)

"""Pointers in Continents"""

datanewAsia = dataset2.loc[dataset['continent'] == 'Asia']
meanNewCasesAsia = datanewAsia['total_cases_per_million'].mean(axis=0)
meanNewDeathsAsia = datanewAsia['total_deaths_per_million'].mean(axis=0)
logosA = meanNewCasesAsia/meanNewDeathsAsia
continentdata = continentdata.append({'meanCases' : meanNewCasesAsia, 'meanDeaths' : meanNewDeathsAsia ,
                            'meanlogos' : logosA, 'continent' : 'Asia'}, ignore_index=True)

datanewEurope = dataset2.loc[dataset['continent'] == 'Europe']
meanNewCasesEurope = datanewEurope['total_cases_per_million'].mean(axis=0)
meanNewDeathsEurope = datanewEurope['total_deaths_per_million'].mean(axis=0)
logosE = meanNewCasesEurope/meanNewDeathsEurope
continentdata = continentdata.append({'meanCases' : meanNewCasesEurope, 'meanDeaths' : meanNewDeathsEurope ,
                            'meanlogos' : logosE, 'continent' : 'Europe'}, ignore_index=True)

datanewAfrica = dataset2.loc[dataset['continent'] == 'Africa']
meanNewCasesAfrica = datanewAfrica['total_cases_per_million'].mean(axis=0)
meanNewDeathsAfrica = datanewAfrica['total_deaths_per_million'].mean(axis=0)
logosAF = meanNewCasesAfrica/meanNewDeathsAfrica
continentdata = continentdata.append({'meanCases' : meanNewCasesAfrica, 'meanDeaths' : meanNewDeathsAfrica ,
                            'meanlogos' : logosAF, 'continent' : 'Africa'}, ignore_index=True)

datanewNAmerica = dataset2.loc[dataset['continent'] == 'North America']
meanNewCasesNAmerica = datanewNAmerica['total_cases_per_million'].mean(axis=0)
meanNewDeathsNAmerica = datanewNAmerica['total_deaths_per_million'].mean(axis=0)
logosNA = meanNewCasesNAmerica/meanNewDeathsNAmerica
continentdata = continentdata.append({'meanCases' : meanNewCasesNAmerica, 'meanDeaths' : meanNewDeathsNAmerica ,
                            'meanlogos' : logosNA, 'continent' : 'North America'}, ignore_index=True)

datanewSAmerica = dataset2.loc[dataset['continent'] == 'South America']
meanNewCasesSAmerica = datanewSAmerica['total_cases_per_million'].mean(axis=0)
meanNewDeathsSAmerica = datanewSAmerica['total_deaths_per_million'].mean(axis=0)
logosSA = meanNewCasesSAmerica/meanNewDeathsSAmerica
continentdata = continentdata.append({'meanCases' : meanNewCasesSAmerica, 'meanDeaths' : meanNewDeathsSAmerica ,
                            'meanlogos' : logosSA, 'continent' : 'South America'}, ignore_index=True)


datanewOceania = dataset2.loc[dataset['continent'] == 'Oceania']
meanNewCasesOceania = datanewOceania['total_cases_per_million'].mean(axis=0)
meanNewDeathsOceania = datanewOceania['total_deaths_per_million'].mean(axis=0)
logosO = meanNewCasesOceania/meanNewDeathsOceania
continentdata = continentdata.append({'meanCases' : meanNewCasesOceania, 'meanDeaths' : meanNewDeathsOceania ,
                            'meanlogos' : logosO, 'continent' : 'Oceania'}, ignore_index=True)
print(continentdata)

"""Visualize Δείκτες στις Ηπείρους"""

sns.set(rc={"figure.figsize":(10, 6)}) 
sns.barplot(x='continent', y='meanCases', hue='continent',data=continentdata)

"""## D. Voting and covid-19"""

votedata = pd.read_excel('state-voting.xlsx') 
statedata = pd.read_csv('United_States_COVID-19_Cases_and_Deaths_by_State_over_Time (1).csv', delimiter = ',')
finaldata = pd.DataFrame(columns = ['state' , 'voted' , 'total cases' , 'total deaths'])

statisticaldata = pd.merge(votedata, statedata, on=['state'])
finaldata['state'] = statisticaldata['state']
finaldata['voted'] = statisticaldata['vote']
finaldata['total cases'] = statisticaldata['tot_cases']
finaldata['total deaths'] = statisticaldata['tot_death']

#print(finaldata)

"""## Visualize the data"""

sns.set(rc={"figure.figsize":(20, 16)}) 
sns.barplot(x='state', y='total cases', hue='voted',data=finaldata, ci = 95,palette="magma")

"""
*   R = Republican

*   D = Democratic
"""

sns.set(rc={"figure.figsize":(20, 16)}) 
sns.barplot(x='state', y='total deaths', hue='voted',data=finaldata,ci = 95,palette="magma")